ITS OK:
	-> S'occuper de SDL2:
	* Board du jeu (taille dynamique)
		+ Cellules
		+ Labels
		+ Monstres en haut et leurs valeurs
		+ Bouton pour solve, etc ?
	-> cas d'erreur, taille du board (width/height) et pas assez de value pour chaque side ou inversement, etc
	-> jouer
	* Sélection du mob
	* Placement/Supression du mob
	* Display si 'is_game_over'
	* Menu ? (ie. options (fullscreen, son, ... ?), générer new bord, générer la solution, etc) => VRAIMENT LATER J'PENSE




	FOR NOW:
Amir -> fuite mémoire solver !
Athman -> optimiser le solver
Sarah -> Rajouter des tests
Amir -> Corriger solver si width != height
Jojo -> Redondance de code entre undead_text.c et undead_sdl.c
				->Créer un toolbox







	FOR LATER:
	THEN:
-> Commenter le code solver/solver_lib
-> Rajouter des commentaires sur game/_io.c
-> Passer certaines functions en static dans les libs
-> Finir la doc des sous-libs
-> fct. pour la génération aléatoire du board



HOW SHOULD WE DO FOR SDL:
	-> Probablement stocker le game du jeu dans la struct Env
	-> Charger les images dans les variables de la struct Env dans la fonction init()
	-> Afficher les éléments graphiques dans la partie render()
	-> Faire les entrées users, etc dans la partie process() du fichier SDL
		* On transmet les valeurs de pos, etc à un fichier C, qui transforme les informations (ie. entrées clavier, position de la souris quand on clique, etc)
